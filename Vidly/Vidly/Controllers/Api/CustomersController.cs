using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Dtos;
using Vidly.Models;
using System.Data.Entity;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        protected override void Dispose(bool disposing)
        {
            _context.Dispose();
            base.Dispose(disposing);
        }

        // GET /api/customers
        public IHttpActionResult GetCustomers()
        {
            
            return Ok(_context.Customers
                .Include(c => c.MembershipType)
                .ToList()
                .Select(Mapper.Map<Customer, CustomerDto>));
        }

        // GET /api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(cust => cust.Id == id);
            if (customer != null)
            {
                return Ok(Mapper.Map<Customer, CustomerDto>(customer));
            }
            else
                return NotFound();
        }
        
        // POST /api/customers
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (ModelState.IsValid)
            {
                Customer customer = Mapper.Map<CustomerDto, Customer>(customerDto);
                _context.Customers.Add(customer);

                try
                {
                    _context.SaveChanges();

                }
                catch (Exception ex)
                {
                    return InternalServerError(ex);
                }

                // Id was generated by the database
                customerDto.Id = customer.Id;
                return Created<CustomerDto>(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
            }
            else
            {
                // Get errors
                var errorBuilder = new System.Text.StringBuilder();
                foreach (var modelState in ModelState.Values)
                    foreach (var modelError in modelState.Errors)
                        errorBuilder.Append(modelError.ErrorMessage + "; ");
                return BadRequest(errorBuilder.ToString());
                //return BadRequest();
            }
        }

        // PUT /api/customers/i
        [HttpPut]
        public void UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (ModelState.IsValid)
            {
                var customerInDb = _context.Customers.SingleOrDefault(cust => cust.Id == id);
                if (customerInDb != null)
                {
                    Mapper.Map(customerDto, customerInDb);
            
                    _context.SaveChanges();
                }
                else
                    throw new HttpResponseException(HttpStatusCode.NotFound);
            }
            else
                throw new HttpResponseException(HttpStatusCode.BadRequest);
        }

        // DELETE /api/customers/1
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(cust => cust.Id == id);
            if (customer != null)
            {
                _context.Customers.Remove(customer);
                _context.SaveChanges();
            }
            else
                throw new HttpResponseException(HttpStatusCode.NotFound);
        }

    }
}
